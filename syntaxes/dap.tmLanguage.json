{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "dap",
  "scopeName": "source.dap",
  "fileTypes": [
    "dap"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#support"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "variables": {
      "patterns": [
        {
          "name": "meta.function.declaration.dap",
          "patterns": [
            {
              "match": "\\b(data)\\s*([A-Za-z_][_A-Za-z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "keyword.structure.dap"
                },
                "2": {
                  "name": "entity.name.type.dap"
                }
              }
            },
            {
              "match": "\\b([A-Z][_A-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "variable.other.dap"
                }
              }
            },
            {
              "match": "\\b([A-Z][_A-Za-z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "entity.name.type.dap"
                }
              }
            },
            {
              "match": "([A-Za-z_][_A-Za-z0-9]*)\\s*::\\s*\\(.*?\\)\\s*->",
              "captures": {
                "1": {
                  "name": "entity.name.function.dap"
                }
              }
            }
          ]
        },
        {
          "name": "meta.function.call.dap",
          "patterns": [
            {
              "match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()",
              "name": "entity.name.function.dap"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "(\\binline\\b)?\\s*\\b(while|for)\\b",
          "name": "keyword.control.repeat.dap"
        },
        {
          "name": "keyword.storage.dap",
          "match": "\\b(export|import)\\b"
        },
        {
          "name": "keyword.structure.dap",
          "match": "\\b(view|constraint)\\b"
        },
        {
          "name": "keyword.control.dap",
          "match": "\\b(if|for|while|else|where|guard)\\b"
        },
        {
          "name": "keyword.control.flow.dap",
          "match": "\\b(break|return|continue|defer|errdefer|case)\\b"
        },
        {
          "name": "keyword.constant.default.dap",
          "match": "\\b(null)\\b"
        },
        {
          "name": "keyword.constant.bool.dap",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.type.integer.dap",
          "match": "\\b(f16|f32|f64|f128|u\\d+|i\\d+|char|unit|byte)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.dap",
          "match": "(\\b(&&|\\|\\|)\\b)|(==|!=)"
        },
        {
          "name": "keyword.operator.arithmetic.dap",
          "match": "(-|\\+|\\*|/|%)=?"
        },
        {
          "name": "keyword.operator.bitwise.dap",
          "match": "(<<|>>|!|&|\\^|\\|)=?"
        },
        {
          "name": "keyword.operator.special.dap",
          "match": "(==|\\+\\+|\\*\\*)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.dap",
          "begin": "//",
          "end": "$",
          "patterns": [
            {
              "include": "#commentContents"
            }
          ]
        }
      ]
    },
    "commentContents": {
      "patterns": [
        {
          "match": "\\b(TODO|FIXME|XXX|NOTE)\\b:?",
          "name": "keyword.todo.dap"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.dap",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        },
        {
          "name": "string.quoted.single.dap",
          "match": "'([^'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.dap",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.dap",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.dap",
          "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.dap",
          "match": "\\b[0-9][0-9_]*\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.dap",
          "match": "\\b0x[a-fA-F0-9_]+\\b"
        },
        {
          "name": "constant.numeric.octal.dap",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.binary.dap",
          "match": "\\b0b[01_]+\\b"
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "comment": "Macros",
          "name": "support.function.macro.dap",
          "match": "#[_a-zA-Z][_a-zA-Z0-9]*"
        }
      ]
    }
  }
}